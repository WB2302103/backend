// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  passwordHash String
  role         Role       @default(CUSTOMER)
  orders       Order[]
  cart         Cart?
  reviews      Review[]
  wishlist     Wishlist[]
  createdAt    DateTime   @default(now())
}

enum Role {
  CUSTOMER
  ADMIN
}

model Product {
  id            Int         @id @default(autoincrement())
  title         String
  description   String
  price         Float
  stockQuantity Int
  imageUrl      String
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    Int
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlists     Wishlist[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  status      OrderStatus @default(PENDING)
  totalAmount Float
  payment     Payment?
  createdAt   DateTime    @default(now())
  tranId    String?  @unique
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  unitPrice Float
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  addedAt   DateTime @default(now())
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique
  provider      String
  status        PaymentStatus
  amount        Float
  transactionId String
  paidAt        DateTime
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}
